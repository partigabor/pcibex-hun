---
title: "Eyetracking"
author: "Wenxi Fei"
format: html
---
# Eye-tracking data pre-processing

```{r setup}
#| include: false
library(readxl)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(mgcv)
library(itsadug)
library(brms)
library(tidyverse)
library(BayesFactor)
library(posterior)
library(bayestestR)

```

```{r load data}
#| include: false
# load data "eye_all.xlsx"
VWdat <- read_excel("eye_all.xlsx")

```

```{r prepare data}
# select data in which the column "condition" is "f0" or "dur" or "int" or "mid-level"
VWdat <- VWdat %>% filter(condition %in% c("f0", "dur", "int", "mid-level"))

# rename the column "RECORDING_SESSION_LABEL" to "participant"
VWdat <- VWdat %>% rename(participant = RECORDING_SESSION_LABEL)
VWdat <- VWdat %>% rename(itemid = TRIAL_INDEX)

# deselect columns 
VWdat <- VWdat %>% select(-BIN_DURATION, -BIN_SAMPLE_COUNT, -IP_START_TIME, -IP_END_TIME, -RIGHT_GAZE_Y_BIN, -RIGHT_GAZE_X_BIN, 
                          -DISPLAY_ON_TIME, -KEY_PRESS_TIME, -KEY_PRESSED, -audiofile, -block, -practicestatus)

# select data "BIN_START_TIME" <= 2000
VWdat <- VWdat[VWdat$BIN_START_TIME <= 2000,]

```


```{r exclude data "fast response"}
# select data in which the column "RT" is smaller than "sentenceend"
fast_response <- VWdat %>% filter(RT < sentenceend)
# print nrow of "fast_response" / nrow of "VWdat" in percentage
print (nrow(fast_response) / nrow(VWdat) * 100)


```

```{r exlude data with RT outliers}
# caculate and remove the outliers of RT by participant
outliers <- VWdat %>% filter(VWdat$RT >= mean(VWdat$RT) + 3.5 * sd(VWdat$RT) | VWdat$RT <= mean(VWdat$RT) - 3.5 * sd(VWdat$RT))
# print nrow of "outliers" / nrow of "VWdat" in percentage
print (nrow(outliers) / nrow(VWdat) * 100)

```

```{r exclude blicks}
# select data in which the column "RIGHT_BLINK_SAMPLE_COUNT_%" is above 0.5
blink <- VWdat %>% filter(`RIGHT_BLINK_SAMPLE_COUNT_%` > 0.5)
# print nrow of "blink" / nrow of "VWdat" in percentage
print (nrow(blink) / nrow(VWdat) * 100)

```

```{r exclude data "excluded"}
# select data in which the column "RIGHT_EXCLUDED_SAMPLE_COUNT_%" is above 0.5
excluded <- VWdat %>% filter(`RIGHT_EXCLUDED_SAMPLE_COUNT_%` > 0.5)
# print nrow of "excluded" / nrow of "VWdat" in percentage
print (nrow(excluded) / nrow(VWdat) * 100)

```


```{r exclude data all}
# select data in which the column "RT" equals to or larger than "sentenceend"
new_VWdat <- VWdat %>% filter(RT >= sentenceend)
new_VWdat <- new_VWdat %>% filter(`RIGHT_BLINK_SAMPLE_COUNT_%` <= 0.5)
new_VWdat <- new_VWdat %>% filter(`RIGHT_EXCLUDED_SAMPLE_COUNT_%` <= 0.5)
new_VWdat <- new_VWdat %>% filter(new_VWdat$RT < mean(new_VWdat$RT) + 3.5 * sd(new_VWdat$RT) & new_VWdat$RT > mean(new_VWdat$RT) - 3.5 * sd(new_VWdat$RT))

print (nrow(new_VWdat) / nrow(VWdat) * 100)

```



```{r rename "mid-level"}
# copy the condition of "mid-level"
new_VWdat <- rbind(new_VWdat, new_VWdat[new_VWdat$condition == "mid-level",])
new_VWdat <- rbind(new_VWdat, new_VWdat[new_VWdat$condition == "mid-level",])

# reorder the sequence by "condition", "participant", "level"
new_VWdat <- new_VWdat[order(new_VWdat$condition, new_VWdat$participant, new_VWdat$identifier, new_VWdat$BIN_INDEX),]

# change the condition of the copied data to "f0", "dur", "int"
new_VWdat$condition[new_VWdat$condition == "mid-level"] <- c("f0", "dur", "int", "mid-level")
# delete the original "mid-level" data
new_VWdat <- new_VWdat[new_VWdat$condition != "mid-level",]

# relabel the condition of "f0", "dur", "int" to "F0", "Duration", "Intensity"
new_VWdat$condition <- factor(new_VWdat$condition, levels = c("f0", "dur", "int"), labels = c("F0", "Duration", "Intensity"))
```


```{r normalize the proportion}
preference_score <- function(a, b) {
  score <- (a - b) / max(a, b)
  return(score)
}

new_VWdat$preference_v <- preference_score(new_VWdat$RIGHT_IA_2_SAMPLE_COUNT, new_VWdat$RIGHT_IA_1_SAMPLE_COUNT)


```

# Plot

```{r plot settings}
my_theme <-
  theme(
  plot.title = element_text(size = 24),
  axis.text.x = element_text(size = 18),
  axis.text.y = element_text(size = 20),
  axis.title.x = element_text(size = 16),
  axis.title.y = element_text(size = 20),
  axis.line = element_line(linewidth = .3),
  axis.ticks = element_line(linewidth = .3),
  legend.position = "right",
  legend.text = element_text(size = 18),
  legend.title = element_text(size = 20),
  strip.text=element_text(size = 20),
  strip.background = element_blank())
```


```{r select data by condition}
new_VWdat$level <- as.factor(new_VWdat$level)
new_VWdat$BIN_START_TIME <- as.numeric(new_VWdat$BIN_START_TIME)
new_VWdat$participant <- as.factor(new_VWdat$participant)
new_VWdat$itemid <- as.factor(new_VWdat$itemid)

VWdat_f0 <- new_VWdat[new_VWdat$condition == "F0",]
VWdat_dur <- new_VWdat[new_VWdat$condition == "Duration",]
VWdat_int <- new_VWdat[new_VWdat$condition == "Intensity",]

```

```{r condition plot}
# plot the data in smooth line with "BIN_START_TIME" as x-axis, "preference_v" as y-axis, "condition" as color and group
ggplot(new_VWdat, aes(x = BIN_START_TIME, y = preference_v, group = condition, color = condition, fill = condition)) +
  geom_smooth(alpha = 0.3) +
  theme_minimal() +
  scale_fill_manual(values = c("F0" = "#DB5638", "Duration" = "#96BBDB", "Intensity" = "#408F36")) +
  scale_color_manual(values = c("F0" = "#DB5638", "Duration" = "#96BBDB", "Intensity" = "#408F36")) +
  labs(title = "Preference score over time", x = "Time (ms)", y = "Preference score") +
  
  annotate('text', x = 600-60, y = 0.7, label="mean Verb onset", angle=90, size = 5) +
  annotate('text', x = mean(new_VWdat$critwordoffset) - 60, y = 0.7, label="mean Verb offset", angle=90, size = 5) +
  annotate('text', x = mean(new_VWdat$sentenceend) - 60, y = 0.7, label="mean Sentence offset", angle=90, size = 5) +
  # 
  geom_vline(xintercept = 600, linetype = "longdash") +
  geom_vline(xintercept = mean(new_VWdat$critwordoffset), linetype = "longdash") +
  geom_vline(xintercept = mean(new_VWdat$sentenceend), linetype = "longdash") +

  scale_x_continuous(expand=c(0,0),breaks=seq(0, 2000, 300), labels = function(x) x - 600) +
  scale_y_continuous(limits=c(-1,1),expand=c(0,0))


```

```{r F0 plot}
# plot the data in smooth line with "BIN_START_TIME" as x-axis, "preference_v" as y-axis, "condition" as color and group
ggplot(VWdat_f0, aes(x = BIN_START_TIME, y = preference_v, group = level, color = level, fill = level)) +
  geom_smooth(alpha = 0.3) +
  theme_minimal() +
  my_theme +
  scale_fill_manual(name = "Step", values = c("1" = "#ede9d0", "2" = "#F8CBAD", "3" = "#eaa693", "4" = "#db5638", "5" = "#b9381f", "6" = "#981705", "7" = "#5a0000")) +
  scale_color_manual(name = "Step", values = c("1" = "#ede9d0", "2" = "#F8CBAD", "3" = "#eaa693", "4" = "#db5638", "5" = "#b9381f", "6" = "#981705", "7" = "#5a0000")) +
  labs(x = "Time (ms)", y = "Prop. 'verb focus' preference") +
  ggtitle("F0") +
  annotate('text', x = 600-60, y = 0.7, label="Verb onset", angle=90, size = 7) +
  annotate('text', x = mean(VWdat_f0$critwordoffset) - 60, y = 0.7, label="Verb offset", angle=90, size = 7) +
  annotate('text', x = mean(VWdat_f0$sentenceend) - 60, y = 0.7, label="Sent. offset", angle=90, size = 7) +
  
  geom_vline(xintercept = 600, linetype = "longdash") +
  geom_vline(xintercept = mean(VWdat_f0$critwordoffset), linetype = "longdash") +
  geom_vline(xintercept = mean(VWdat_f0$sentenceend), linetype = "longdash") +

  scale_x_continuous(expand=c(0,0),breaks=seq(0, 2000, 300), labels = function(x) x - 600) +
  scale_y_continuous(limits=c(-1,1),expand=c(0,0)) +
  
  annotate("rect", xmin = 1050.51, xmax = 2000, ymin = -0.96, ymax = -1, alpha = 0.8, fill = "#db5638") +
  annotate("rect", xmin = 1353.54, xmax = 1757.58, ymin = -0.92, ymax = -0.96, alpha = 0.8, fill = "#EDB488")


ggsave("F0.png", width = 12, height = 6, dpi = 300)


```

```{r dur plot}
# plot the data in smooth line with "BIN_START_TIME" as x-axis, "preference_v" as y-axis, "condition" as color and group
dur <- ggplot(VWdat_dur, aes(x = BIN_START_TIME, y = preference_v, group = level, color = level, fill = level)) +
  geom_smooth(alpha = 0.3) +
  theme_minimal() +
  my_theme + 
  scale_fill_manual(name = "Step", values = c("1" = "#F3F7FC", "2" = "#DEEBF7", "3" = "#BDD7EE", "4" = "#9DC3E6", "5" = "#5B9BD5", "6" = "#396795", "7" = "#1F4E79")) +
  scale_color_manual(name = "Step", values = c("1" = "#F3F7FC", "2" = "#DEEBF7", "3" = "#BDD7EE", "4" = "#9DC3E6", "5" = "#5B9BD5", "6" = "#396795", "7" = "#1F4E79")) +
  labs(x = "Time (ms)", y = "Prop. 'verb focus' preference") +
  ggtitle("Duration") +
  annotate('text', x = 600-60, y = 0.7, label="Verb onset", angle=90, size = 7) +
  annotate('text', x = mean(VWdat_dur$critwordoffset) - 60, y = 0.7, label="Verb offset", angle=90, size = 7) +
  annotate('text', x = mean(VWdat_dur$sentenceend) - 60, y = 0.7, label="Sent. offset", angle=90, size = 7) +
  # 
  geom_vline(xintercept = 600, linetype = "longdash") +
  geom_vline(xintercept = mean(VWdat_dur$critwordoffset), linetype = "longdash") +
  geom_vline(xintercept = mean(VWdat_dur$sentenceend), linetype = "longdash") +

  scale_x_continuous(expand=c(0,0),breaks=seq(0, 2000, 300), labels = function(x) x - 600) +
  scale_y_continuous(limits=c(-1,1),expand=c(0,0))

ggsave("dur.png", width = 6.5, height = 6, dpi = 300)
```

```{r int plot}
# plot the data in smooth line with "BIN_START_TIME" as x-axis, "preference_v" as y-axis, "condition" as color and group
int <- ggplot(VWdat_int, aes(x = BIN_START_TIME, y = preference_v, group = level, color = level, fill = level)) +
  geom_smooth(alpha = 0.3) +
  theme_minimal() +
  my_theme +
  scale_fill_manual(name = "Step", values = c("1" = "#F3F9F1", "2" = "#E2F0D9", "3" = "#C5E0B4", "4" = "#A9D18E", "5" = "#70AD47", "6" = "#548235", "7" = "#385723")) +
  scale_color_manual(name = "Step", values = c("1" = "#F3F9F1", "2" = "#E2F0D9", "3" = "#C5E0B4", "4" = "#A9D18E", "5" = "#70AD47", "6" = "#548235", "7" = "#385723")) +
  labs(x = "Time (ms)", y = "") +
  ggtitle("Intensity") +
  annotate('text', x = 600-60, y = 0.7, label="Verb onset", angle=90, size = 7) +
  annotate('text', x = mean(VWdat_int$critwordoffset) - 60, y = 0.7, label="Verb offset", angle=90, size = 7) +
  annotate('text', x = mean(VWdat_int$sentenceend) - 60, y = 0.7, label="Sent. offset", angle=90, size = 7) +
  # 
  geom_vline(xintercept = 600, linetype = "longdash") +
  geom_vline(xintercept = mean(VWdat_int$critwordoffset), linetype = "longdash") +
  geom_vline(xintercept = mean(VWdat_int$sentenceend), linetype = "longdash") +

  scale_x_continuous(expand=c(0,0),breaks=seq(0, 2000, 300), labels = function(x) x - 600) +
  scale_y_continuous(limits=c(-1,1),expand=c(0,0))

ggsave("int.png", width = 6.5, height = 6, dpi = 300)

```

```{r combined plot dur_int}
plot_dur_int <- grid.arrange(dur, int, nrow=1)
ggsave("dur_int.png", plot_dur_int, width = 12, height = 6, dpi = 300)
```


# GAMM
```{r data transformation}

# Calculate the empirical logit (Elog) transformation
elog_transform <- function(y, n) {
  log((y + 0.5) / (n - y + 0.5))
}

# Assuming total looks (n) is the sum of looks
new_VWdat$total_looks <- new_VWdat$RIGHT_IA_2_SAMPLE_COUNT + new_VWdat$RIGHT_IA_1_SAMPLE_COUNT + new_VWdat$RIGHT_IA_0_SAMPLE_COUNT

new_VWdat$elog_v <- elog_transform(new_VWdat$RIGHT_IA_2_SAMPLE_COUNT, new_VWdat$total_looks)
new_VWdat$elog_n <- elog_transform(new_VWdat$RIGHT_IA_1_SAMPLE_COUNT, new_VWdat$total_looks)

# Calculate the log-transformed normalized preference measure
new_VWdat$preference_log <- new_VWdat$elog_v - new_VWdat$elog_n

```

## F0
```{r select data by level}
VWdat_f0 <- new_VWdat[new_VWdat$condition == "F0",]

VWdat_f0_1_7 <- VWdat_f0 %>% filter(level == "1" | level == "7")
VWdat_f0_1_7 <- droplevels(VWdat_f0_1_7)
contrasts(VWdat_f0_1_7$level) = contr.sum(length(levels(VWdat_f0_1_7$level)))

VWdat_f0_3_5 <- VWdat_f0[VWdat_f0$level == "3" | VWdat_f0$level == "5",]
VWdat_f0_3_5 <- droplevels(VWdat_f0_3_5)
contrasts(VWdat_f0_3_5$level) = contr.sum(length(levels(VWdat_f0_3_5$level)))


VWdat_f0_2_3 <- VWdat_f0[VWdat_f0$level == "2" | VWdat_f0$level == "3",]
VWdat_f0_2_3 <- droplevels(VWdat_f0_2_3)
contrasts(VWdat_f0_2_3$level) = contr.sum(length(levels(VWdat_f0_2_3$level)))

```

```{r f0 gamm}
gamm_f0 <- bam(preference_log ~ level + s(BIN_START_TIME, by = level) + 
                    s(BIN_START_TIME, participant, by = level, bs="fs", m=1) + 
                    s(BIN_START_TIME, itemid, by = level, bs="fs", m=1), data = VWdat_f0)

```


```{r VWdat_f0_1_7 model}

gamm_f0_1_7_full <- bam(preference_log ~ level + s(BIN_START_TIME, by = level) + 
                    s(BIN_START_TIME, participant, by = level, bs="fs", m=1) + 
                    s(BIN_START_TIME, itemid, by = level, bs="fs", m=1), data = VWdat_f0_1_7)

```


<!-- ```{r f0_1_7 compare model} -->
<!-- compareML(gamm_f0_1_7_null, gamm_f0_1_7_full) -->
<!-- ``` -->

```{r VWdat_f0_1_7 smooth}
plot_smooth(gamm_f0_1_7_full, view="BIN_START_TIME", plot_all="level", v0=0)
```


```{r VWdat_f0_1_7 time window}
plot_diff(gamm_f0_1_7_full, view="BIN_START_TIME", comp=list(level=c("1", "7")))
```

```{r VWdat_f0_2_3 model}
gamm_f0_2_3_full <- bam(preference_log ~ level + s(BIN_START_TIME, by = level) + 
                    s(BIN_START_TIME, participant, by = level, bs="fs", m=1) + 
                    s(BIN_START_TIME, itemid, by = level, bs="fs", m=1), data = VWdat_f0_2_3)

```

```{r VWdat_f0_2_3 time window}
plot_diff(gamm_f0_2_3_full, view="BIN_START_TIME", comp=list(level=c("2", "3")))
```

```{r VWdat_f0_2_3 time window}
plot_diff(gamm_f0_2_3_full, view="BIN_START_TIME", comp=list(level=c("2", "3")))
```


```{r separate plot for gamms}
plot_1_7 <- plot_diff(gamm_f0_1_7_full, view="BIN_START_TIME", comp=list(level=c("1", "7")), plot=FALSE)

plot_1_7_highlight<-ifelse(plot_1_7$est+plot_1_7$CI<0|plot_1_7$est-plot_1_7$CI>0,1,0)
plot_1_7$inds <- diff(c(0, plot_1_7_highlight))
start <- plot_1_7$BIN_START_TIME[plot_1_7$inds == 1];start<-start[!is.na(start)]
end <- c(plot_1_7$BIN_START_TIME[plot_1_7$inds == -1]);end<-end[!is.na(end)]
if (length(start) > length(end)) end <- c(end, tail(plot_1_7$BIN_START_TIME, 1))

plot1 <- ggplot(plot_1_7,aes(x=BIN_START_TIME,y=est))+ 
  geom_hline(yintercept=0,linetype=2,color="gray30")+
  geom_line()+
  annotate("rect", xmin = start, xmax = end, ymin = -11, ymax = 5, alpha = 0.25, fill = "#db5638") +
  theme_minimal() + 
  my_theme +
  scale_x_continuous(expand=c(0,0),breaks=seq(0, 2000, 300), labels = function(x) x - 600) +
  geom_ribbon(aes(ymin=est-CI,ymax=est+CI,color=NULL),alpha=0.2)+
  ggtitle("Step 1-7") +
  labs(x = "Time (ms)", y = "Est. smooth difference")


plot_2_3 <- plot_diff(gamm_f0_2_3_full, view="BIN_START_TIME", comp=list(level=c("2", "3")), plot=FALSE)

plot_2_3_highlight<-ifelse(plot_2_3$est+plot_2_3$CI<0|plot_2_3$est-plot_2_3$CI>0,1,0)
plot_2_3$inds <- diff(c(0, plot_2_3_highlight))
start <- plot_2_3$BIN_START_TIME[plot_2_3$inds == 1];start<-start[!is.na(start)]
end <- c(plot_2_3$BIN_START_TIME[plot_2_3$inds == -1]);end<-end[!is.na(end)]
if (length(start) > length(end)) end <- c(end, tail(plot_2_3$BIN_START_TIME, 1))

plot2 <- ggplot(plot_2_3,aes(x=BIN_START_TIME,y=est))+ 
  geom_hline(yintercept=0,linetype=2,color="gray30")+
  geom_line()+
  annotate("rect", xmin = start, xmax = end, ymin = -11, ymax = 5, alpha = 0.4, fill = "#EDB488") +
  theme_minimal() + 
  my_theme +
  scale_x_continuous(expand=c(0,0),breaks=seq(0, 2000, 300), labels = function(x) x - 600) +
  geom_ribbon(aes(ymin=est-CI,ymax=est+CI,color=NULL),alpha=0.2)+
  ggtitle("Step 2-3") +
  labs(x = "Time (ms)", y = "")


```


```{r combined plot}
plot_both <- grid.arrange(plot1, plot2, nrow=1)
ggsave("comparison.png", plot_both, width = 12, height = 6, dpi = 300)
```


## Duration
```{r select data by level}
VWdat_dur <- new_VWdat[new_VWdat$condition == "Duration",]

VWdat_dur_1_7 <- VWdat_dur %>% filter(level == "1" | level == "7")
VWdat_dur_1_7 <- droplevels(VWdat_dur_1_7)
contrasts(VWdat_dur_1_7$level) = contr.sum(length(levels(VWdat_dur_1_7$level)))

```


```{r VWdat_dur_1_7 model}
gamm_dur_1_7_full <- bam(preference_v ~ level + s(BIN_START_TIME, by = level) + 
                    s(BIN_START_TIME, participant, by = level, bs="fs", m=1) + 
                    s(BIN_START_TIME, itemid, by = level, bs="fs", m=1), data = VWdat_dur_1_7)

```


```{r VWdat_dur_1_7 smooth}
plot_smooth(gamm_dur_1_7_full, view="BIN_START_TIME", plot_all="level", v0=0)
```


```{r VWdat_dur_1_7 time window}
plot_diff(gamm_dur_1_7_full, view="BIN_START_TIME", comp=list(level=c("1", "7")))
```
## Intensity
```{r select data by level}
VWdat_int <- new_VWdat[new_VWdat$condition == "Intensity",]
VWdat_int_1_7 <- VWdat_int %>% filter(level == "1" | level == "7")
VWdat_int_1_7 <- droplevels(VWdat_int_1_7)
contrasts(VWdat_int_1_7$level) = contr.sum(length(levels(VWdat_int_1_7$level)))

VWdat_int_2_3 <- VWdat_int %>% filter(level == "2" | level == "3")
VWdat_int_2_3 <- droplevels(VWdat_int_2_3)
contrasts(VWdat_int_2_3$level) = contr.sum(length(levels(VWdat_int_2_3$level)))
```


```{r VWdat_int_1_7 model}
gamm_int_1_7_full <- bam(preference_log ~ level + s(BIN_START_TIME, by = level) + 
                    s(BIN_START_TIME, participant, by = level, bs="fs", m=1) + 
                    s(BIN_START_TIME, itemid, by = level, bs="fs", m=1), data = VWdat_int_1_7)

```


```{r VWdat_int_1_7 smooth}
plot_smooth(gamm_int_1_7_full, view="BIN_START_TIME", plot_all="level", v0=0)
```


```{r VWdat_int_1_7 time window}
plot_diff(gamm_int_1_7_full, view="BIN_START_TIME", comp=list(level=c("1", "7")))
```


```{r VWdat_int_2_3 model}
gamm_int_2_3_full <- bam(preference_log ~ level + s(BIN_START_TIME, by = level) + 
                    s(BIN_START_TIME, participant, by = level, bs="fs", m=1) + 
                    s(BIN_START_TIME, itemid, by = level, bs="fs", m=1), data = VWdat_int_2_3)

```


```{r VWdat_int_2_3 smooth}
plot_smooth(gamm_int_2_3_full, view="BIN_START_TIME", plot_all="level", v0=0)
```


```{r VWdat_int_2_3 time window}
plot_diff(gamm_int_2_3_full, view="BIN_START_TIME", comp=list(level=c("2", "3")))
```

